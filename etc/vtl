#! /bin/bash
# Copyright (c) 2005 Mark Harvey
# All rights reserved.
#
# Author: Mark Harvey, 2005
#	  mark794 at gmail dot com
#	  mark dot harvey at veritas dot com
#
# /etc/init.d/vtl
#
# Script to start vtl kernel module & vtltape userspace daemon
#
# Virtual tape & library system
#
# $Id: vtl,v 1.12.2.3 2006-08-30 06:35:01 markh Exp $
#
### BEGIN INIT INFO
# Provides:       vtl
# Required-Start: syslog
# Required-Stop:
# Default-Start:  2 3 5
# Default-Stop: 0 1 6
# Description:    Script to start/stop vtl kernel modules & vtltape userspace daemons
### END INIT INFO

USER=vtl
DEFAULT_FW=5400

OPTIONS=
# OPTIONS=" -v"

export PATH=$PATH:/usr/bin

if [ -f /etc/rc.status ]; then
	. /etc/rc.status
	rc_reset
fi

if [ -x /usr/bin/lsscsi ]; then
	LSSCSI=/usr/bin/lsscsi
elif [ -x /bin/lsscsi ]; then
	LSSCSI=/bin/lsscsi
fi

# Create a 'vtl.conf' if it does not exist...
if [ ! -f /etc/vtl/vtl.conf ]; then

mkdir -p /etc/vtl
cat > /etc/vtl/vtl.conf << VTL_CONF

# If vtl kernel module > 0.12.14, then we have the ability to either bring
# the vtl up with all the same type of drive or mixed drive combo.
# defaults to mixed drive combo.
#USE_MIXED_DRIVES=0
USE_MIXED_DRIVES=1

# if vtl kernel module > 0.12.20, then we can preset the SSC serial numbers
# with the following prefix.
SERIAL_PREFIX=XYZ

# If vtl kernel module > 0.12.20, then we have the ability to preset the
# max buffer size used by the SSC devices within the kernel module. Old default
# is 512k. Example here is 256k
SSC_BUFFER_SZ=262144

# Pre-set firmware version returned from INQUIRY.
FIRMWARE=$DEFAULT_FW

# Default media capacity (500 M)
CAPACITY=500

# Set default verbosity [0|1]
VERBOSE=0

# Set kernel module debuging [0|1]
VTL_DEBUG=0
VTL_CONF
fi

. /etc/vtl/vtl.conf

# Earlier versions of vtl.conf may not contain the 'FIRMWARE' string.
# Update if nessessary..
EXIST=`grep FIRMWARE /etc/vtl/vtl.conf|wc -l`
if [ $EXIST -eq 0 ]; then
	FIRMWARE=$DEFAULT_FW
	echo "" >> /etc/vtl/vtl.conf
	echo "# Default vtl firmware" >> /etc/vtl/vtl.conf
	echo FIRMWARE=$DEFAULT_FW >> /etc/vtl/vtl.conf
fi

# Now check for for 'library_contents'
if [ ! -f /etc/vtl/library_contents ]; then
	echo
	echo "Could not locate library config file: /etc/vtl/library_contents"
	echo "Creating a default one"
	echo "Please stop vtl & edit /etc/vtl/library_contents to suit your requirements"
	mkdir -p /etc/vtl
	cat > /etc/vtl/library_contents << CONF_SAMPLE
Drive 1: XYZZY_1
Drive 2: XYZZY_2
Drive 3: XYZZY_3
Drive 4: XYZZY_4
Drive 5: XYZZY_5
Drive 6: XYZZY_6
Drive 7: XYZZY_7
Drive 8: XYZZY_8

Picker 1:

MAP 1:
MAP 2:
MAP 3:
MAP 4:

Slot 1: SDLT01L1
Slot 2: SDLT02L1
Slot 3: SDLT03L1
Slot 4: SDLT04L1
Slot 5: SDLT05L1
Slot 6: SDLT06L1
Slot 7: SDLT07L1
Slot 8: SDLT08L1
Slot 9: SDLT09L1
Slot 10:
Slot 11: ULT001L1
Slot 12: ULT002L1
Slot 13: ULT003L1
Slot 14: ULT004L1
Slot 15: ULT005L1
Slot 16: ULT006L1
Slot 17: ULT007L1
Slot 18: ULT008L1
Slot 19: ULT009L1
Slot 20:
Slot 21: 8MM001
Slot 22: 8MM002
Slot 23: 8MM003
Slot 24: 8MM004
Slot 25:
Slot 26:
Slot 27:
Slot 28:
Slot 29:
Slot 30:
Slot 31: CLN001L1
Slot 32: CLN002L1
Slot 33: CLN003L1
CONF_SAMPLE
fi

case "$1" in
    start)
	load_vtl=`grep " vtl$" /proc/devices|awk '{print $2}'`
	if [ "X$load_vtl" == "X" ]; then
        	echo "Initializing vtl kernel module"
		modprobe vtl set_firmware=0x$FIRMWARE
		# Virtual env - can take a few more seconds for things to load & setup..
		DELAY=`$LSSCSI|grep VMware|wc -l`
		if [ $DELAY -gt 0 ]; then
			sleep 3
		else
			sleep 1
		fi
		echo
	fi

	hba=`ls /proc/scsi/vtl|tail -1`
	if [ "X$hba" == "X" ]; then
		echo "Incorrect (or no) kernel module loaded for these daemons."
		echo "Need vtl kernel module version later then 0.12.12"
		echo "Please see http://linuxvtl.googlepages.com"
		exit 1
	fi
	vtlMidVersion=`grep version /proc/scsi/vtl/$hba 2> /dev/null|awk '{print $5}'|awk -F. '{print $2}'`
	if [ $vtlMidVersion -lt 14 ]; then
		vtlMinVersion=`grep version /proc/scsi/vtl/$hba 2> /dev/null|awk '{print $5}'|awk -F. '{print $3}'`
		if [ $vtlMinVersion -lt 20 ]; then
			echo "Incorrect kernel module for these daemons."
			echo "Need at least 0.12.20 and 0.12.$vtlMinVersion is loaded."
			echo "Please see http://linuxvtl.googlepages.com"
			exit 1
		fi
		echo "Note: kernel version 0.14 is available."
		echo "Please see http://linuxvtl.googlepages.com"
	fi

	# Load sg driver if not already loaded..
	sg=`grep " sg$" /proc/devices | awk '{print $2}'`
	if [ "X$sg" == "X" ]; then
		/sbin/modprobe sg
		sleep 1
	fi

	chmod 750 /etc/vtl
	if [ ! -f /etc/vtl/vxlib.conf ]; then
		touch /etc/vtl/vxlib.conf
	fi
	chown -R $USER:$USER /etc/vtl
	chmod 770 /opt/vtl

	# creating devices
	make_vtl_devices $USER > /dev/null

	# Now correct file permissions..
	chown -R $USER:$USER /opt/vtl /dev/vtl[0-9]

	# Set verbosity of kernel driver
	if [ "X$VTL_DEBUG" != "X" ]; then
		echo $VTL_DEBUG > /sys/bus/pseudo/drivers/vtl/opts
	fi

	# Build Library config - No. of drives & serial Nos etc..
	# This also loads each tape daemon.
	build_library_config $USER
	if [ $? != 0 ]; then
		echo "build_library_config failed.."
		exit 1
	fi

	# Start the vxlibrary daemon
	su $USER -c "vtllibrary $OPTIONS"

	if [ -f /etc/rc.status ]; then
		rc_status -v
	fi
	;;
    stop)
        echo "shutdown of mhvtl"
	for a in `ps -ef|grep ^vtl | grep "\-q"|awk '{print $10}'`
	do
		echo "   Sending exit to $a"
		vtlcmd $a exit
		usleep 100 > /dev/null 2>&1 /dev/null
	done

	# Send library daemon exit msg..
	vtlcmd library  exit

	if [ -f /etc/rc.status ]; then
		rc_status -v
	fi
	;;
    shutdown)
	# Remove kernel moduel (vtl) along with messageQ key.
        echo "Removing vtl kernel module"
	for a in `ps -ef|grep ^vtl | grep "\-q"|awk '{print $10}'`
	do
		echo "   Sending exit to $a"
		vtlcmd $a exit
		usleep 100 > /dev/null 2>&1 /dev/null
	done

	# Send library daemon exit msg..
	vtlcmd library  exit
	rmmod vtl
	Q_EXISTS=`ipcs -q|grep 4d61726b|awk '{print $2}'`
	if [ "X$Q_EXISTS" != "X" ]; then
		ipcrm -q $Q_EXISTS
	fi
	if [ -f /etc/rc.status ]; then
		rc_status -v
	fi
	;;
    *)
	echo "Usage: $0 {start|stop|shutdown}"
	exit 1
esac
if [ -f /etc/rc.status ]; then
	rc_exit
fi
