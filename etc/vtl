#! /bin/bash
# Copyright (c) 2005 Mark Harvey
# All rights reserved.
#
# Author: Mark Harvey, 2005
#	  mark794 at gmail dot com
#	  mark dot harvey at veritas dot com
#
# /etc/init.d/vtl
#
# Script to start vtl kernel module & vtltape userspace daemon
#
# Virtual tape & library system
#
# $Id: vtl,v 1.12.2.3 2006-08-30 06:35:01 markh Exp $
#
### BEGIN INIT INFO
# Provides:       vtl
# Required-Start: syslog
# Required-Stop:
# Default-Start:  2 3 5
# Default-Stop: 0 1 6
# Description:    Script to start/stop vtl kernel modules & vtltape userspace daemons
### END INIT INFO

USER=vtl

OPTIONS=

export PATH=$PATH:/usr/bin

if [ -f /etc/rc.status ]; then
	. /etc/rc.status
	rc_reset
fi

# Create a 'device.conf' if it does not exist...
if [ ! -f /etc/vtl/device.conf ]; then

mkdir -p /etc/vtl
cat > /etc/vtl/device.conf << VTL_CONF

VERSION: 2

# VPD page format:
# <page #> <Length> <x> <x+1>... <x+n>

# NOTE: The order of records is IMPORTANT...
# The 'Unit serial number:' should be last (except for VPD data)
# i.e.
# Order is : Vendor ID, Product ID, Product Rev and serial number finally
# Zero, one or more VPD entries.
#
# Each 'record' is sperated by one (or more) blank lines.
# Each 'record' starts at column 1

Library: 0 CHANNEL: 0 TARGET: 0 LUN: 0
 Vendor identification: STK 
 Product identification: L700
 Product revision level: 5500
 Unit serial number: XYZZY

Drive: 1 CHANNEL: 0 TARGET: 1 LUN: 0
 Vendor identification: QUANTUM 
 Product identification: SDLT600         
 Product revision level: 5500
 Unit serial number: XYZZY_A1         
 Max density: 0x46
 VPD: b0 04 00 02 01 00

Drive: 2 CHANNEL: 0 TARGET: 2 LUN: 0
 Vendor identification: QUANTUM 
 Product identification: SDLT600         
 Product revision level: 5500
 Unit serial number: XYZZY_A2         
 Max density: 0x46
 VPD: b0 04 00 02 01 00

Drive: 3 CHANNEL: 0 TARGET: 3 LUN: 0
 Vendor identification: QUANTUM 
 Product identification: SDLT600         
 Product revision level: 5500
 Unit serial number: XYZZY_A3         
 Max density: 0x46
 VPD: b0 04 00 02 01 00

Drive: 4 CHANNEL: 0 TARGET: 3 LUN: 1
 Vendor identification: QUANTUM 
 Product identification: SDLT600         
 Product revision level: 5500
 Unit serial number: XYZZY_A4         
 Max density: 0x46
 VPD: b0 04 00 02 01 00

VTL_CONF
fi

# Create a 'vtl.conf' if it does not exist...
if [ ! -f /etc/vtl/vtl.conf ]; then

mkdir -p /etc/vtl
cat > /etc/vtl/vtl.conf << VTL_CONF

# Default media capacity (500 M)
CAPACITY=500

# Set default verbosity [0|1]
VERBOSE=1

# Set kernel module debuging [0|1]
VTL_DEBUG=1
VTL_CONF
fi

. /etc/vtl/vtl.conf

# Earlier versions of vtl.conf may not contain the 'CAPACITY' string.
# Update if nessessary..
EXIST=`grep CAPACITY /etc/vtl/vtl.conf|wc -l`
if [ $EXIST -eq 0 ]; then
	echo "" >> /etc/vtl/vtl.conf
	echo "# Default media capacity" >> /etc/vtl/vtl.conf
	echo CAPACITY=500 >> /etc/vtl/vtl.conf
fi

# Now check for for 'library_contents'
if [ ! -f /etc/vtl/library_contents ]; then
	echo
	echo "Could not locate library config file: /etc/vtl/library_contents"
	echo "Creating a default one"
	echo "Please stop vtl & edit /etc/vtl/library_contents to suit your requirements"
	mkdir -p /etc/vtl
	cat > /etc/vtl/library_contents << CONF_SAMPLE
VERSION: 2

Drive 1: XYZZY_A1
Drive 2: XYZZY_A2
Drive 3: XYZZY_A3
Drive 4: XYZZY_A4

Picker 1:

MAP 1:
MAP 2:
MAP 3:
MAP 4:

# Slot 1 - ?, no gaps
# Slot N: [barcode]
# [barcode]
# a barcode is comprised of three fields: [Leading] [identifier] [Trailing]
# Leading "CLN" -- cleaning tape
# Leading "W" -- WORM tape
# Leading "NOBAR" -- will appear to have no barcode
# If the barcode is at least 8 character long, then the last two characters are Trailing
# Trailing "S3" - SDLT600
# Trailing "X4" - AIT-4
# Trailing "L1" - LTO 1
# Trailing "TA" - T10000+
# Trailing "JA" - 3592+
# Trailing "JB" - 3592E05+
# Trailing "JW" - WORM 3592+
# Trailing "JX" - WORM 3592E05+
#
Slot 1: SDLT01S3
Slot 2: SDLT02S3
Slot 3: SDLT03S3
Slot 4: SDLT04S3
Slot 5: SDLT05S3
Slot 6: SDLT06S3
Slot 7: SDLT07S3
Slot 8: SDLT08S3
Slot 9: SDLT09S3
Slot 10:
Slot 11: ULT001L1
Slot 12: ULT002L2
Slot 13: ULT003L3
Slot 14: ULT004L4
Slot 15: ULT005L1
Slot 16: ULT006L2
Slot 17: ULT007L3
Slot 18: ULT008L4
Slot 19: ULT009L1
Slot 20:
Slot 21: 8MM001X4
Slot 22: 8MM002X4
Slot 23: 8MM003X4
Slot 24: 8MM004X4
Slot 25:
Slot 26:
Slot 27:
Slot 28:
Slot 29:
Slot 30:
Slot 31: CLN001L1
Slot 32: CLN002L1
Slot 33: CLN003L1
CONF_SAMPLE
fi

DRIVES=`grep ^Drive /etc/vtl/library_contents|wc -l`

case "$1" in
    start)
	load_vtl=`grep " vtl$" /proc/devices|awk '{print $2}'`
	if [ "X$load_vtl" == "X" ]; then
		modprobe vtl
	fi

	hba=`ls /proc/scsi/vtl|tail -1`
	if [ "X$hba" == "X" ]; then
		echo "Incorrect (or no) kernel module loaded for these daemons."
		echo "Need vtl kernel module version later then 0.16.0"
		echo "Please see http://linuxvtl.googlepages.com"
		exit 1
	fi
	vtlMidVersion=`grep version /proc/scsi/vtl/$hba 2> /dev/null|awk '{print $5}'|awk -F. '{print $2}'`
	if [ $vtlMidVersion -lt 16 ]; then
		echo "Incorrect kernel module for these daemons."
		echo "Need at least 0.16.0"
		echo "Please see http://linuxvtl.googlepages.com"
		exit 1
	fi

	# Load sg driver if not already loaded..
	sg=`grep " sg$" /proc/devices | awk '{print $2}'`
	if [ "X$sg" == "X" ]; then
		/sbin/modprobe sg
		sleep 1
	fi

	chmod 750 /etc/vtl
	if [ ! -f /etc/vtl/vxlib.conf ]; then
		touch /etc/vtl/vxlib.conf
	fi
	chown -R $USER:$USER /etc/vtl
	chmod 770 /opt/vtl

	# creating devices
	make_vtl_devices $USER > /dev/null

	# Now correct file permissions..
	chown -R $USER:$USER /opt/vtl /dev/vtl[0-9]

	# Set verbosity of kernel driver
	if [ "X$VTL_DEBUG" != "X" ]; then
		echo $VTL_DEBUG > /sys/bus/pseudo/drivers/vtl/opts
	fi

	# Build Library media
	make_vtl_media $USER
	if [ $? != 0 ]; then
		echo "make_vtl_media failed.."
		exit 1
	fi

	# Build Library config - No. of drives & serial Nos etc..
	# This also loads each tape daemon.
	build_library_config $USER
	if [ $? != 0 ]; then
		echo "build_library_config failed.. Could not start daemons"
		exit 1
	fi

	if [ -f /etc/rc.status ]; then
		rc_status -v
	fi
	;;

    stop)
        echo "shutdown of mhvtl"
	for a in `ps -ef|grep ^vtl | grep "\-q"|awk '{print $10}'`
	do
		echo "   Sending exit to $a"
		vtlcmd $a exit
		usleep 100 > /dev/null 2>&1 /dev/null
	done

	vtlcmd library exit

	if [ -f /etc/rc.status ]; then
		rc_status -v
	fi
	;;
    shutdown)
	# Remove kernel moduel (vtl) along with messageQ key.
        echo "Removing vtl kernel module"
	for a in `ps -ef|grep ^vtl | grep "\-q"|awk '{print $10}'`
	do
		echo "   Sending exit to $a"
		vtlcmd $a exit
		usleep 100 > /dev/null 2>&1 /dev/null
	done

	# Send library daemon exit msg..
	vtlcmd library  exit
	rmmod vtl
	Q_EXISTS=`ipcs -q|grep 4d61726b|awk '{print $2}'`
	if [ "X$Q_EXISTS" != "X" ]; then
		ipcrm -q $Q_EXISTS
	fi
	if [ -f /etc/rc.status ]; then
		rc_status -v
	fi
	;;
    *)
	echo "Usage: $0 {start|stop|shutdown}"
	exit 1
esac
if [ -f /etc/rc.status ]; then
	rc_exit
fi
