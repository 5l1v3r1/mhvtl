#!/bin/sh
#
# Parse lsscsi -g o/p to build a drive/library config for the 'vxlibrary'
# daemon.
#
# Designed to be called from vtl rc script
#
# * Copyright (C) 2005 Mark Harvey markh794 at gmail dot com
# *                                mark_harvey at symantec dot com
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

export PATH=/usr/bin:$PATH

if [ $# != 1 ]; then
	echo "Usage: $0 username"
	exit 1
fi

USER=$1
TMP=/var/tmp/_build.$$
CONFIG=/etc/vtl/vxlib.conf
LIBCONTENTS=/etc/vtl/library_contents
OPTIONS=""

# rc script will make sure this exists...
. /etc/vtl/vtl.conf

# Set default capacity to 500M if not defined.
if [ $CAPACITY -eq 0 ]; then
	CAPACITY=500
fi

if [ $VERBOSE -gt 0 ];then
	OPTIONS="-v"
fi

if [ -x /usr/bin/lsscsi ]; then
	LSSCSI=/usr/bin/lsscsi
elif [ -x /bin/lsscsi ]; then
	LSSCSI=/bin/lsscsi
else
	echo "Can not find 'lsscsi' - Aborting...."
	echo " Please visit http://www.torque.net/scsi/lsscsi.html"
	exit 1
fi

echo "# Config file build `date`" > $CONFIG

if [ ! -d /sys/bus/pseudo/drivers/vtl ]; then
	echo "vtl kernel module not loaded - Exiting..."
	exit 1
fi

count=`grep ^Drive $LIBCONTENTS|wc -l`
if [ $VERBOSE -gt 0 ];then
	echo "Found $count drives in library contents file /etc/vtl/library_contents"
fi

# If we can't find any existing devices, then add '$count` devices
# If USE_MIXED_DRIVES is set to 0, then all drives will be of same type
countDevices=`$LSSCSI -g | grep tape | grep $FIRMWARE | wc -l`
if [ $VERBOSE -gt 0 ]; then
	echo "Found $countDevices tape drives already.."
fi

if [ $countDevices -lt $count ]; then
	count=`expr $count - $countDevices`
	if [ $count -lt 0 ]; then
		$count=0
	fi
	if [ $VERBOSE -gt 0 ]; then
		echo "Adding $count more devices..."
	fi

	if [ $USE_MIXED_DRIVES -eq 0 ]; then
		echo $count > /sys/bus/pseudo/drivers/vtl/num_tgts
	else
		echo $count > /sys/bus/pseudo/drivers/vtl/max_luns
	fi

	# Set up SSC (Tape drive) params...
	#
	# Set up a 128k buffer size.
	if [ -f /sys/bus/pseudo/drivers/vtl/ssc_buffer_sz ]; then
		echo $SSC_BUFFER_SZ > /sys/bus/pseudo/drivers/vtl/ssc_buffer_sz
	fi
	if [ -f /sys/bus/pseudo/drivers/vtl/firmware ]; then
		echo $FIRMWARE > /sys/bus/pseudo/drivers/vtl/firmware
	fi

	if [ $countDevices -eq 0 ]; then
		if [ "X$SERIAL_PREFIX" != "X" ]; then
			if [ -f /sys/bus/pseudo/drivers/vtl/serial_prefix ]; then
				echo $SERIAL_PREFIX > /sys/bus/pseudo/drivers/vtl/serial_prefix
			fi
		fi
	fi

	# OK -> Now load the new 'host' with the SSC devices attached...
	echo 1 > /sys/bus/pseudo/drivers/vtl/add_host
fi

count=0

# Wait for devices to be registered with kernel and sg devices to be setup..
RDY=1
while [ $RDY -gt 0 ]; do
	RDY=`$LSSCSI -g|grep tape|grep $FIRMWARE|awk '{print $7}'|grep -v dev|wc -l`
	if [ $RDY -gt 0 ]; then
		if [ $VERBOSE -gt 0 ]; then
			echo "Waiting for devices to be setup"
		fi
		sleep 1
	fi
done

for a in `$LSSCSI -g | grep tape | grep $FIRMWARE | awk '{print $7}'`
do
	count=`expr $count + 1`
	# Set serial number of each device...
	if [ -x /usr/bin/vtl_set_sn ]; then
		/usr/bin/vtl_set_sn -q $count
	fi
	# Start the vxtape daemon...
	su $USER -c "vtltape -q $count $OPTIONS"
	echo "Drive: $count"
	echo "Drive: $count" >> $CONFIG

	# Test Unit Ready - Clear init flag..
	sg_turs $a > /dev/null 2>&1

	# Earlier versions of lsscsi use Product serial,
	# so change to later syntax
	sg_inq $a |sed -e 's/Product serial/Unit serial/' > $TMP

	cat $TMP | grep "Vendor identification:" >> $CONFIG
	cat $TMP | grep "Product identification:" >> $CONFIG
	cat $TMP | grep "Product revision level:" >> $CONFIG
	cat $TMP | grep "Unit serial number:" >> $CONFIG
done

echo >> $CONFIG
echo "NumberDrives: $count" >> $CONFIG
echo "NumberSlots: `grep Slot $LIBCONTENTS|wc -l`" >> $CONFIG
echo "NumberMAP: `grep MAP $LIBCONTENTS|wc -l`" >> $CONFIG
echo "NumberPicker: `grep Picker $LIBCONTENTS|wc -l`" >> $CONFIG

rm -f $TMP

# Create any media specified in library config.
umask 002

# Cleaning carts
for a in `cat $LIBCONTENTS|grep ":"|grep -v Drive|awk '{print $3}'|grep ^CLN|sort -u`
do
	if [ ! -f /opt/vtl/$a ]; then
		su $USER -c "mktape -s $CAPACITY -t clean -m $a"
	fi
done

# WORM media
for a in `cat $LIBCONTENTS|grep ":"|grep -v Drive|awk '{print $3}'|grep ^W|sort -u`
do
	if [ ! -f /opt/vtl/$a ]; then
		su $USER -c "mktape -s $CAPACITY -t WORM -m $a"
	fi
done

# Rest must be Data
for a in `cat $LIBCONTENTS|grep ":"|grep -v Drive|awk '{print $3}'|sort -u`
do
	if [ ! -f /opt/vtl/$a ]; then
		su $USER -c "mktape -s $CAPACITY -t data -m $a"
	fi
done

