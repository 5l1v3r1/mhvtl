#!/bin/bash
#
# Designed to be called from mhvtl rc script
#
# * Copyright (C) 2005 Mark Harvey markh794@gmail.com
# *                                mark.harvey at nutanix.com
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# TODO:
#	- ensure we are root?
#

if [ $# -ne 0 ]; then
	echo "Usage: $0" 1>&2
	exit 1
fi

CONFIG_FILE='@CONF_PATH@/mhvtl.conf'

if [[ ! -r $CONFIG_FILE ]] ; then
	echo "error: config file not found: $CONFIG_FILE" 1>&2
	exit 1
fi

. $CONFIG_FILE

#
# set_media_type -- set global variable MEDIA_MEDIA_TYPE
#
set_media_type()
{
	if (( $# != 1 )) ; then
		echo "internal error: wrong number of arguments" 1>&1
		exit 1
	fi
	type=$1

	e0_regex='[A-Z0-9]{6,8}([J])([WXY])$'
	lto_regex='[A-Z0-9]{6,8}([L])([TUVW])$'

	# default to data type
	MEDIA_TYPE=data

	if [[ $type =~ ^"W" ]]; then
		MEDIA_TYPE="work"
	elif [[ $type =~ ^"CLN" ]]; then
		MEDIA_TYPE="clean"
	# Match JW / JX as 'worm' media
	elif [[ $type =~ $e0_regex ]]; then
		MEDIA_TYPE="WORM"
	elif [[ $type =~ $lto_regex ]]; then
		MEDIA_TYPE="WORM"
	fi
}

#
# set_density -- set global variable DENSITY
#
set_density()
{
	if (( $# != 1 )) ; then
		echo "internal error: wrong number of arguments" 1>&1
		exit 1
	fi
	density=$1

	# I'm sure there is a better method then this...
	# There is.. Thanks to Gavin Barnard.
	regex='[A-Z0-9]{6,8}([SLXTJD])([12345678ABKUVWXYZ])$'
	#regex='[A-Z0-9]{4,6}([SLXTJ])([123456ABWX])[0-9]*$' # for bacula
	DENSITY=UNKNOWN

	if [[ $density =~ $regex ]]; then
		#matches=${#BASH_REMATCH[*]}
		if [ ${BASH_REMATCH[1]} = 'L' ]; then
			if [ ${BASH_REMATCH[2]} = 'T' ]; then
				DENSITY="LTO3"
			elif [ ${BASH_REMATCH[2]} = 'U' ]; then
				DENSITY="LTO4"
			elif [ ${BASH_REMATCH[2]} = 'V' ]; then
				DENSITY="LTO5"
			elif [ ${BASH_REMATCH[2]} = 'W' ]; then
				DENSITY="LTO6"
			else
				DENSITY="LTO${BASH_REMATCH[2]}"
			fi
		elif [ ${BASH_REMATCH[1]} = 'D' ]; then
			if [ ${BASH_REMATCH[2]} = '7' ]; then
				DENSITY="DLT4"
			fi
		elif [ ${BASH_REMATCH[1]} = 'S' ]; then
			if [ ${BASH_REMATCH[2]} = '3' ]; then
				DENSITY="SDLT600"
			elif [ ${BASH_REMATCH[2]} = '2' ]; then
				DENSITY="SDLT320"
			elif [ ${BASH_REMATCH[2]} = '1' ]; then
				DENSITY="SDLT220"
			else
				DENSITY="SDLT"
			fi
		elif [ ${BASH_REMATCH[1]} = 'J' ]; then
			if [ ${BASH_REMATCH[2]} = 'A' ]; then
				DENSITY="J1A"
			elif [ ${BASH_REMATCH[2]} = 'B' ]; then
				DENSITY="E05"
			elif [ ${BASH_REMATCH[2]} = 'W' ]; then
				DENSITY="E05"
			elif [ ${BASH_REMATCH[2]} = 'X' ]; then
				DENSITY="E05"
			elif [ ${BASH_REMATCH[2]} = 'Y' ]; then
				DENSITY="E07"
			elif [ ${BASH_REMATCH[2]} = 'K' ]; then
				DENSITY="E07"
			fi
		elif [ ${BASH_REMATCH[1]} = 'X' ]; then
			DENSITY="AIT${BASH_REMATCH[2]}"
		elif [ ${BASH_REMATCH[1]} = 'T' ]; then
			if [ ${BASH_REMATCH[2]} = 'Z' ]; then
				DENSITY="9840A"
			elif [ ${BASH_REMATCH[2]} = 'Y' ]; then
				DENSITY="9840B"
			elif [ ${BASH_REMATCH[2]} = 'X' ]; then
				DENSITY="9840C"
			elif [ ${BASH_REMATCH[2]} = 'W' ]; then
				DENSITY="9840D"
			elif [ ${BASH_REMATCH[2]} = 'V' ]; then
				DENSITY="9940A"
			elif [ ${BASH_REMATCH[2]} = 'U' ]; then
				DENSITY="9940B"
			else
				DENSITY="T10K${BASH_REMATCH[2]}"
			fi
		fi
	fi
}

##################################################################
## Main starts here...
##################################################################

# Set default capacity to 500M if not defined.
CAPACITY=${CAPACITY:=500}

if [[ ! -d $MHVTL_HOME_PATH ]] ; then
	echo "warning: creating directory: $MHVTL_HOME_PATH" 1>&2
	mkdir -p $MHVTL_HOME_PATH
	chmod 750 $MHVTL_HOME_PATH
fi

# Create any media specified in library config.
umask 002

if [[ ! -r $MHVTL_CONFIG_PATH/device.conf ]] ; then
	echo "error: not found: $MHVTL_CONFIG_PATH/device.conf" 1>&2
	exit 1
fi

# for LIBCONTENTS in $MHVTL_CONFIG_PATH/library_contents.*
for LIBID in $(awk '/Library:/ {print $2}' $MHVTL_CONFIG_PATH/device.conf) ; do
	LIBCONTENTS="$MHVTL_CONFIG_PATH/library_contents.$LIBID"

	if [[ ! -r $LIBCONTENTS ]] ; then
		echo "error: not found: $LIBCONTENTS" 1>&2
		exit 1
	fi
	for a in $(awk '/^Slot/ {print $3}' <$LIBCONTENTS|sort -u) ; do
		set_density $a
		set_media_type $a
		if [ ! -d $MHVTL_HOME_PATH/$a ]; then
			mktape -l $LIBID -s $CAPACITY -t $MEDIA_TYPE -m $a -d $DENSITY
		fi
	done
done
